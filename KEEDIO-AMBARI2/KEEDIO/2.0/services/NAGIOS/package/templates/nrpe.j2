#############################################################################
# ample NRPE Config File 
# Written by: Ethan Galstad (nagios@nagios.org)
# 
# Last Modified: 11-23-2007
#
# NOTES:
# This is a sample configuration file for the NRPE daemon.  It needs to be
# located on the remote host that is running the NRPE daemon, not the host
# from which the check_nrpe client is being executed.
#############################################################################


# LOG FACILITY
# The syslog facility that should be used for logging purposes.

log_facility=daemon



# PID FILE
# The name of the file in which the NRPE daemon should write it's process ID
# number.  The file is only written if the NRPE daemon is started by the root
# user and is running in standalone mode.

pid_file=/var/run/nrpe/nrpe.pid



# PORT NUMBER
# Port number we should wait for connections on.
# NOTE: This must be a non-priviledged port (i.e. > 1024).
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

server_port=5666



# SERVER ADDRESS
# Address that nrpe should bind to in case there are more than one interface
# and you do not want nrpe to bind on all interfaces.
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

#server_address=127.0.0.1



# NRPE USER
# This determines the effective user that the NRPE daemon should run as.  
# You can either supply a username or a UID.
# 
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_user=nrpe



# NRPE GROUP
# This determines the effective group that the NRPE daemon should run as.  
# You can either supply a group name or a GID.
# 
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

nrpe_group=nrpe

# ALLOWED HOST ADDRESSES
# This is an optional comma-delimited list of IP address or hostnames 
# that are allowed to talk to the NRPE daemon. Network addresses with a bit mask
# (i.e. 192.168.1.0/24) are also supported. Hostname wildcards are not currently 
# supported.
#
# Note: The daemon only does rudimentary checking of the client's IP
# address.  I would highly recommend adding entries in your /etc/hosts.allow
# file to allow only the specified host to connect to the port
# you are running this daemon on.
#
# NOTE: This option is ignored if NRPE is running under either inetd or xinetd

# COMMAND ARGUMENT PROCESSING
# This option determines whether or not the NRPE daemon will allow clients
# to specify arguments to commands that are executed.  This option only works
# if the daemon was configured with the --enable-command-args configure script
# option.  
#
# *** ENABLING THIS OPTION IS A SECURITY RISK! *** 
# Read the SECURITY file for information on some of the security implications
# of enabling this variable.
#
# Values: 0=do not allow arguments, 1=allow command arguments

dont_blame_nrpe=0



# BASH COMMAND SUBTITUTION
# This option determines whether or not the NRPE daemon will allow clients
# to specify arguments that contain bash command substitutions of the form
# $(...).  This option only works if the daemon was configured with both 
# the --enable-command-args and --enable-bash-command-substitution configure 
# script options.
#
# *** ENABLING THIS OPTION IS A HIGH SECURITY RISK! *** 
# Read the SECURITY file for information on some of the security implications
# of enabling this variable.
#
# Values: 0=do not allow bash command substitutions, 
#         1=allow bash command substitutions

allow_bash_command_substitution=0



# COMMAND PREFIX
# This option allows you to prefix all commands with a user-defined string.
# A space is automatically added between the specified prefix string and the
# command line from the command definition.
#
# *** THIS EXAMPLE MAY POSE A POTENTIAL SECURITY RISK, SO USE WITH CAUTION! ***
# Usage scenario: 
# Execute restricted commmands using sudo.  For this to work, you need to add
# the nagios user to your /etc/sudoers.  An example entry for alllowing 
# execution of the plugins from might be:

#
# nagios          ALL=(ALL) NOPASSWD: /usr/lib/nagios/plugins/
#
# This lets the nagios user run all commands in that directory (and only them)
# without asking for a password.  If you do this, make sure you don't give
# random users write access to that directory or its contents!

# command_prefix=/usr/bin/sudo 



# DEBUGGING OPTION
# This option determines whether or not debugging messages are logged to the
# syslog facility.
# Values: 0=debugging off, 1=debugging on

debug=0



# COMMAND TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# allow plugins to finish executing before killing them off.

command_timeout=60



# CONNECTION TIMEOUT
# This specifies the maximum number of seconds that the NRPE daemon will
# wait for a connection to be established before exiting. This is sometimes
# seen where a network problem stops the SSL being established even though
# all network sessions are connected. This causes the nrpe daemons to
# accumulate, eating system resources. Do not set this too low.

connection_timeout=300



# WEEK RANDOM SEED OPTION
# This directive allows you to use SSL even if your system does not have
# a /dev/random or /dev/urandom (on purpose or because the necessary patches
# were not applied). The random number generator will be seeded from a file
# which is either a file pointed to by the environment valiable $RANDFILE
# or $HOME/.rnd. If neither exists, the pseudo random number generator will
# be initialized and a warning will be issued.
# Values: 0=only seed from /dev/[u]random, 1=also seed from weak randomness

#allow_weak_random_seed=1



# INCLUDE CONFIG FILE
# This directive allows you to include definitions from an external config file.

#include=<somefile.cfg>



# COMMAND DEFINITIONS
# Command definitions that this daemon will run.  Definitions
# are in the following format:
#
# command[<command_name>]=<command_line>
#
# When the daemon receives a request to return the results of <command_name>
# it will execute the command specified by the <command_line> argument.
#
# Unlike Nagios, the command line cannot contain macros - it must be
# typed exactly as it should be executed.
#
# Note: Any plugins that are used in the command lines must reside
# on the machine that this daemon is running on!  The examples below
# assume that you have plugins installed in a /usr/local/nagios/libexec
# directory.  Also note that you will have to modify the definitions below
# to match the argument format the plugins expect.  Remember, these are
# examples only!


# The following examples use hardcoded command arguments...




allowed_hosts={% for nagios_host in nagios_server_host %}{{ nagios_host }},{% endfor %}localhost

command[check_users]=/usr/lib64/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib64/nagios/plugins/check_load -w {{ cpus * 3 }},{{ cpus * 2 }},{{ cpus }} -c {{ cpus * 5 }},{{ cpus * 4 }},{{ cpus * 3 }}
command[check_chrony]=/usr/lib64/nagios/plugins/check_chrony.sh 500 1000
{% if has_namenodes %}
{% for path in data_path_nn %}
command[check_disk_nn{{loop.index}}]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p {{ path }}
{% endfor %}
{% for path in data_path_dn %}
command[check_disk_dn{{loop.index}}]=/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p {{ path }}
{% endfor %}
{% endif %}
command[check_zombie_procs]=/usr/lib64/nagios/plugins/check_procs -w 5 -c 10 -s Z
command[check_total_procs]=/usr/lib64/nagios/plugins/check_procs -w 150 -c 200 
{% if has_namenodes %}
{% if security_enabled %}
command[check_hdfs]=/usr/lib64/nagios/plugins/check_hadoop_hdfs.py -s -p "{{ hdfs_princ }}" -k "{{ hdfs_keytab }}" --critical_datanodes {{ datanodes_hosts|count }} {% if dfs_ha_enabled %}--ha{% endif %}

{% else %}
command[check_hdfs]=/usr/bin/sudo -u hdfs /usr/lib64/nagios/plugins/check_hadoop_hdfs.py --critical_datanodes {{ datanodes_hosts|length }} {% if dfs_ha_enabled %}--ha{% endif %}

{% endif %}
{% endif %}
{% if has_namenodes %}
{% if dfs_ha_enabled %}
command[check_qjm]=/usr/lib64/nagios/plugins/check_hadoop_journalnode.py --qjm {{ journalnode_hosts_port }}
{% endif %}
{% endif %}
{% if has_namenodes %}
{% for nn in namenode_host %}
command[check_httpfs_tmp_nn{{loop.index}}]=/usr/lib64/nagios/plugins/check_hadoop_httpfs.py --namenode {{ nn }} --path /tmp --type DIRECTORY --permission 1777
{% endfor %}
{% endif %}
{% if has_hbase %}
{% if security_enabled %}
command[check_hbase]=/usr/lib64/nagios/plugins/check_hbase.py -s -p "hbase_princ" -k "hbase_keytab" 2>/dev/null
{% else %}
command[check_hbase]=/usr/bin/sudo -u hbase /usr/lib64/nagios/plugins/check_hbase.py 2>/dev/null
{% endif %}
{% endif %}
{% if has_resourcemanager %}
{% for rm in rm_host %}
command[check_yarn]=/usr/lib64/nagios/plugins/check_yarn_api.py --rm {{ str(rm) }} {% if security_enabled %}-s -p "yarn_princ" -k "yarn_keytab"{% endif %}

{% endfor %}
{% endif %}
{% if has_historyserver %}
{% for hs in hs_host %}
command[check_historyserver]=/usr/lib64/nagios/plugins/check_historyserver.py --historyserver {{ str(hs) }} {% if security_enabled %}-s -p "{{ hs_princ }}" -k "{{ hs_keytab }}"{% endif %}

{% endfor %}  
{% endif %}
{% if has_storm %}
command[check_storm]=/usr/lib64/nagios/plugins/check_storm.py  --nimbus_serv {{ nimbus_server_hosts.pop() }}
{% endif %}
{% if has_kafka %}
command[check_kafka_topic_test]=/usr/lib64/nagios/plugins/check_kafka --hosts {{ zookeeper_connection_list }} --topic test
{% endif %}
{% if has_zookeeper %}
command[check_zookeeper]=/usr/lib64/nagios/plugins/check_zookeeper.py --hosts {{ zookeeper_connection_list }} --version "3.4.8--1, built on 02/27/2017 15:10 GMT"
{% endif %}
{% if has_namenodes %}
command[check_hdfs_znode]=/usr/lib64/nagios/plugins/check_zookeeper_znode.py --hosts {{ zookeeper_connection_list }} --test hdfs --hdfs_cluster_name {{ cluster_name }} {% if security_enabled %}-s -p "{{ hdfs_princ }}" -k "{{ hdfs_keytab }}"{% endif %}

{% endif %}
{% if has_hbase %}
command[check_hbase_znode]=/usr/lib64/nagios/plugins/check_zookeeper_znode.py --hosts {{ zookeeper_connection_list }} --test hbase {% if security_enabled %}-s -p "{{ hbase_princ }}" -k "{{ hbase_keytab }}"{% endif %}

{% endif %}
{% if has_kafka %}
command[check_kafka_znode]=/usr/lib64/nagios/plugins/check_zookeeper_znode.py --hosts {{ zookeeper_connection_list }} --test kafka --warn_hosts {{ [kafka_broker_hosts|count,2]|sort|last -1 }}: --crit_hosts {{ [kafka_broker_hosts|count,3]|sort|last -2 }}: {% if security_enabled %}-s -p "{{ kafka_princ }}" -k "{{ kafka_keytab }}"{% endif %}

{% endif %}
{% if has_oozie %}
{% for oozie_server in oozie_server_hosts %}
command[check_oozie]=/usr/lib64/nagios/plugins/check_oozie.py -H {{ str(oozie_server) }} -P {{ oozie_port }} {% if security_enabled %}-s -p "{{ oozie_princ }}" -k "{{ oozie_keytab }}"{% endif %}

{% endfor %}
{% endif %}
{% if has_elasticsearch %}
command[check_elasticsearch]=/usr/bin/check_elasticsearch -m 2
{% endif %}
{% if has_namenodes %}
{% for nn in namenode_host %}
command[check_ping_nn{{ loop.index }}]=/usr/lib64/nagios/plugins/check_ping -H {{ nn }} -w 100.0,20% -c 500.0,60% -p 5
{% endfor %}
{% if dfs_ha_enabled %}
{% for node in journalnode_hosts %}
command[check_ping_qjm{{ loop.index }}]=/usr/lib64/nagios/plugins/check_ping -H {{ node }} -w 100.0,20% -c 500.0,60% -p 5
{% endfor %}
{% endif %}
{% endif %}
command[check_swap]=/usr/lib64/nagios/plugins/check_swap -w 20 -c 10
{% for m in mountpoints %}
command[check_{{ str(m) }}] =/usr/lib64/nagios/plugins/check_disk -w 20% -c 10% -p  {{ str(m) }}

{% endfor %}
